{"version":3,"sources":["helpers/generateArray.ts","helpers/getMatches.ts","reducers/mastermind.ts","helpers/getExactMatches.ts","helpers/getPartialMatches.ts","helpers/generateCode.ts","helpers/clone.ts","helpers/checkForWin.ts","components/CodePegs.tsx","components/Peg.tsx","components/DecodeRow.tsx","components/Hints.tsx","components/DecodingBoard.tsx","components/Footer.tsx","components/GameOverlay.tsx","helpers/getGameStateInfo.ts","components/Game.tsx","index.tsx"],"names":["generateArray","length","mapper","Array","fill","map","generateGrid","rows","cols","Match","GameState","ActionType","getMatches","codeGuess","secretCode","exactMatches","reduce","acc","guess","i","Exact","None","getExactMatches","matches","alreadyMatched","match","secretMatched","forEach","code","j","Partial","getPartialMatches","sort","reverse","getInitialState","numberOfPegs","numberOfColors","turns","holes","colors","guesses","hints","turn","guessIndex","Math","floor","random","status","InProgress","mastermind","state","action","type","Click","value","payload","nextState","x","JSON","parse","stringify","every","Victory","GameOver","Reset","CodePegs","onClick","className","color","data-value","aria-label","Peg","DecodeRow","pegs","Hints","hint","DecodingBoard","currentRow","Footer","GameOverlay","reset","stateClass","title","getGameStateInfo","Game","colorsArray","_","useReducer","dispatch","peg","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f00160c3.chunk.js","sourcesContent":["export function generateArray<T>(length: number, mapper: (v: any, i: number) => T) {\n  return Array(length).fill(null).map(mapper);\n}\n\nexport function generateGrid<T>(rows: number, cols: number, mapper: (v: T, i: number) => T) {\n  return generateArray(rows, () => generateArray(cols, mapper));\n}","import { getExactMatches } from './getExactMatches';\nimport { getPartialMatches } from './getPartialMatches';\n\nexport enum Match {\n  None,\n  Partial,\n  Exact,\n}\n\nexport const getMatches = (codeGuess: number[], secretCode: number[]) => {\n  const exactMatches = getExactMatches(codeGuess, secretCode);\n  const matches = getPartialMatches([...exactMatches], codeGuess, secretCode);\n\n  return matches.sort().reverse();\n};","import { checkForWin } from '../helpers/checkForWin';\nimport { clone } from '../helpers/clone';\nimport { generateGrid } from '../helpers/generateArray';\nimport { generateCode } from '../helpers/generateCode';\nimport { getMatches } from '../helpers/getMatches';\n\nexport enum GameState {\n  InProgress,\n  Victory,\n  GameOver,\n}\n\nexport enum ActionType {\n  Click,\n  Reset\n}\n\nexport interface State {\n  guesses: number[][];\n  hints: number[][];\n  turn: number;\n  guessIndex: number;\n  secretCode: number[];\n  status?: GameState;\n}\n\nexport const getInitialState = ({turns = 10, holes = 4, colors = 6}): State => ({\n  guesses: generateGrid(turns, holes, () => -1),\n  hints: generateGrid(turns, holes, () => -1),\n  turn: 0,\n  guessIndex: 0,\n  secretCode: generateCode(holes, colors),\n  status: GameState.InProgress,\n});\n\ntype Action = { type: ActionType, payload: { value?: number, turns?: number, holes?: number, colors?: number } };\n\nexport const mastermind = (state: State, action: Action) => {\n  switch (action.type) {\n    case ActionType.Click: {\n      const { value } = action.payload;\n\n      const nextState = clone(state);\n      const { guesses, hints } = nextState;\n\n      guesses[state.turn][state.guessIndex] = value;\n\n      nextState.guessIndex = (state.guessIndex + 1) % guesses[state.turn].length;\n\n      if (nextState.guessIndex === 0) {\n        hints[state.turn] = getMatches(guesses[state.turn], state.secretCode);\n        \n        const winner = checkForWin(hints[state.turn]);\n        if (winner) {\n          nextState.status = GameState.Victory;\n        } else if (state.turn === state.guesses.length - 1) {\n          nextState.status = GameState.GameOver;\n        } else {\n          nextState.status = GameState.InProgress;\n        }\n        nextState.turn = state.turn + 1;\n      }\n\n      return nextState;\n    }\n    case ActionType.Reset: {\n      return getInitialState(action.payload);\n    }\n    default:\n      return state;\n  }\n}","import { Match } from './getMatches';\n\nexport const getExactMatches = (codeGuess: number[], secretCode: number[]) => codeGuess.reduce((acc: number[], guess, i) => {\n    return [\n      ...acc,\n      guess === secretCode[i] ? Match.Exact : Match.None\n    ];\n  }, []);","import { Match } from './getMatches';\n\nexport const getPartialMatches = (matches: Match[], codeGuess: number[], secretCode: number[]) => {\n  const alreadyMatched = matches.map(match => match === Match.Exact);\n  const secretMatched = [...alreadyMatched];\n\n  codeGuess.forEach((guess, i) => {\n    if (alreadyMatched[i]) return;\n\n    secretCode.forEach((code, j) => {\n      if (secretMatched[j]) return;\n      if (matches[i] !== Match.None && alreadyMatched[i]) return;\n      if (guess !== code) return;\n      \n      matches[i] = Match.Partial;\n      alreadyMatched[i] = secretMatched[j] = true;\n    });\n  });\n\n  return matches;\n}","export const generateCode = (numberOfPegs: number, numberOfColors: number) => {\n  const code = [...Array(numberOfPegs)].map(() =>\n    Math.floor(Math.random() * numberOfColors)\n  );\n  return code;\n};","export const clone = (x: any) => JSON.parse(JSON.stringify(x))\n","import { Match } from './getMatches';\n\nexport const checkForWin = (matches: Match[]) => matches.every(match => match === Match.Exact);","type CodePegsProps = {\n  colors: number[];\n  onClick: (peg: number) => void;\n};\n\nconst CodePegs = ({ colors, onClick }: CodePegsProps) => (\n  <div className=\"code-pegs\">\n    {colors.map((color) => (\n      <button\n        key={color}\n        className=\"peg bordered\"\n        data-value={color}\n        onClick={() => onClick(color)}\n        aria-label={`${color}`}\n      ></button>\n    ))}\n  </div>\n);\n\nexport default CodePegs;\n","type PegProps = {\n  value: number;\n};\n\nconst Peg = ({ value }: PegProps) => (\n  <div className=\"peg bordered\" data-value={value}></div>\n);\n\nexport default Peg;\n","import Peg from './Peg';\n\ntype DecodeRowProps = {\n  guess: number[];\n};\n\nconst DecodeRow = ({ guess }: DecodeRowProps) => {\n  const pegs = guess.map((value, i) => <Peg key={i} value={value} />);\n\n  return <>{pegs}</>;\n};\n\nexport default DecodeRow;\n","import { Match } from '../helpers/getMatches';\n\ntype HintsProps = {\n  hints: Match[];\n};\n\nconst Hints = ({ hints }: HintsProps) => (\n  <>\n    {hints.map((hint, i) => (\n      <div key={i} className=\"hint bordered\" data-value={hint}></div>\n    ))}\n  </>\n);\n\nexport default Hints;\n","import DecodeRow from './DecodeRow';\nimport Hints from './Hints';\n\ntype DecodingBoardProps = {\n  guesses: number[][];\n  hints: number[][];\n  currentRow: number;\n};\n\nconst DecodingBoard = ({ guesses, hints, currentRow }: DecodingBoardProps) => (\n  <div className=\"decoding-board\">\n    {guesses.map((guess, i) => (\n      <div\n        key={i}\n        className={`row row-${i} ${currentRow === i ? 'active' : ''}`}\n      >\n        <DecodeRow guess={guess} />\n        <span className=\"grid-spacer\"></span>\n        <Hints hints={hints[i]} />\n      </div>\n    ))}\n  </div>\n);\n\nexport default DecodingBoard;\n","const Footer = () => <footer>Copyright &copy; 2021 Jonas Petersson</footer>;\n\nexport default Footer;\n","import { getGameStateInfo } from '../helpers/getGameStateInfo';\nimport { GameState } from '../reducers/mastermind';\nimport Peg from './Peg';\n\ntype GameOverlayProps = {\n  secretCode?: number[];\n  status: GameState;\n  reset: () => void;\n};\n\nconst GameOverlay = ({ secretCode, status, reset }: GameOverlayProps) => {\n  const { stateClass, title } = getGameStateInfo(status);\n\n  return (\n    <div className=\"overlay\">\n      <div className={`container ${stateClass}`}>\n        <h2>{title}</h2>\n        {secretCode && (\n          <div className=\"code\">\n            {secretCode.map((value, i) => (\n              <Peg key={i} value={value} />\n            ))}\n          </div>\n        )}\n        <button className=\"btn\" onClick={reset}>\n          Reset\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default GameOverlay;\n","import { GameState } from '../reducers/mastermind';\n\nexport const getGameStateInfo = (state: GameState) => {\n  switch(state) {\n    case GameState.Victory:\n      return {\n        stateClass: 'winner',\n        title: 'Congratulations',\n      };\n    case GameState.GameOver:\n      return {\n        stateClass: 'game-over',\n        title: 'Game Over',\n      };\n    default:\n      return {};\n  }\n}","import { useReducer } from 'react';\nimport { generateArray } from '../helpers/generateArray';\nimport {\n  ActionType,\n  GameState,\n  getInitialState,\n  mastermind,\n} from '../reducers/mastermind';\nimport CodePegs from './CodePegs';\nimport DecodingBoard from './DecodingBoard';\nimport Footer from './Footer';\nimport GameOverlay from './GameOverlay';\n\nconst turns = 10;\nconst holes = 4;\nconst colors = 6;\n\nfunction Game() {\n  const colorsArray = generateArray(colors, (_: any, i: number) => i);\n\n  const [state, dispatch] = useReducer(\n    mastermind,\n    getInitialState({ turns, holes, colors })\n  );\n  const { guesses, hints, turn, status, secretCode } = state;\n\n  const onClick = (peg: number) => {\n    dispatch({ type: ActionType.Click, payload: { value: peg } });\n  };\n\n  const reset = () => {\n    dispatch({ type: ActionType.Reset, payload: { turns, holes, colors } });\n  };\n\n  return (\n    <>\n      <h1>Mastermind</h1>\n      <DecodingBoard guesses={guesses} hints={hints} currentRow={turn} />\n      <CodePegs colors={colorsArray} onClick={onClick} />\n      <Footer />\n      {(status === GameState.Victory || status === GameState.GameOver) && (\n        <GameOverlay status={status} secretCode={secretCode} reset={reset} />\n      )}\n    </>\n  );\n}\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Game from './components/Game';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}